var bind = function (a, b) {
	return function () {
		return a.apply(b, arguments);
	};
};
(function (b, a) {
	if (typeof define === "function" && define.amd) {
		return define(["jquery"], function (c) {
			return (b.Tour = a(c));
		});
	} else {
		if (typeof exports === "object") {
			return (module.exports = a(require("jquery")));
		} else {
			return (b.Tour = a(b.jQuery));
		}
	}
})(window, function (c) {
	var b, a;
	a = window.document;
	b = (function () {
		function d(f) {
			this._showPopoverAndOverlay = bind(this._showPopoverAndOverlay, this);
			var g;
			try {
				g = window.localStorage;
			} catch (e) {
				g = false;
			}
			this._options = c.extend(
				{
					name: "tour",
					steps: [],
					container: "body",
					autoscroll: true,
					keyboard: true,
					storage: g,
					debug: false,
					backdrop: false,
					backdropContainer: "body",
					backdropPadding: 0,
					redirect: true,
					orphan: false,
					duration: false,
					delay: false,
					basePath: "",
					template:
						'<div class="popover" role="tooltip"><div class="arrow"></div><div class="flex flex-space"><h3 class="popover-title"></h3><i class="close-tour pointer" data-role="end">X</i></div><div class="popover-content"></div><div class="popover-navigation"> <div class="col-xs-12 no-padding"> <div class="btn-group"><button class="btn btn-sm btn-default btn-prev" data-role="prev"><i class="fas fa-arrow-left"></i>voltar</button> <button class="btn btn-sm btn-primary pull-right btn-next" data-role="next">avan√ßar<i class="fas fa-arrow-right pull-right left-1"></i></button></div><button class="btn btn-sm btn-success btn-end-tour pull-right" data-role="end"><i class="fas fa-check right-1"></i>finalizar</button></div></div></div>',
					afterSetState: function (h, i) {},
					afterGetState: function (h, i) {},
					afterRemoveState: function (h) {},
					onStart: function (h) {},
					onEnd: function (h) {},
					onShow: function (h) {},
					onShown: function (h) {},
					onHide: function (h) {},
					onHidden: function (h) {},
					onNext: function (h) {},
					onPrev: function (h) {},
					onPause: function (i, h) {},
					onResume: function (i, h) {},
					onRedirectError: function (h) {},
				},
				f
			);
			this._force = false;
			this._inited = false;
			this._current = null;
			this.backdrops = [];
			this;
		}
		d.prototype.addSteps = function (f) {
			var g, e, h;
			for (g = 0, e = f.length; g < e; g++) {
				h = f[g];
				this.addStep(h);
			}
			return this;
		};
		d.prototype.addStep = function (e) {
			this._options.steps.push(e);
			return this;
		};
		d.prototype.getStep = function (e) {
			if (this._options.steps[e] != null) {
				return c.extend(
					{
						id: "step-" + e,
						path: "",
						host: "",
						placement: "right",
						title: "",
						content: "<p></p>",
						next: e === this._options.steps.length - 1 ? -1 : e + 1,
						prev: e - 1,
						animation: true,
						container: this._options.container,
						autoscroll: this._options.autoscroll,
						backdrop: this._options.backdrop,
						backdropContainer: this._options.backdropContainer,
						backdropPadding: this._options.backdropPadding,
						redirect: this._options.redirect,
						reflexElement: this._options.steps[e].element,
						backdropElement: this._options.steps[e].element,
						orphan: this._options.orphan,
						duration: this._options.duration,
						delay: this._options.delay,
						template: this._options.template,
						onShow: this._options.onShow,
						onShown: this._options.onShown,
						onHide: this._options.onHide,
						onHidden: this._options.onHidden,
						onNext: this._options.onNext,
						onPrev: this._options.onPrev,
						onPause: this._options.onPause,
						onResume: this._options.onResume,
						onRedirectError: this._options.onRedirectError,
					},
					this._options.steps[e]
				);
			}
		};
		d.prototype.init = function (e) {
			this._force = e;
			if (this.ended()) {
				this._debug("Tour ended, init prevented.");
				return this;
			}
			this.setCurrentStep();
			this._initMouseNavigation();
			this._initKeyboardNavigation();
			this._onResize(
				(function (f) {
					return function () {
						return f.showStep(f._current);
					};
				})(this)
			);
			this._onScroll(
				(function (f) {
					return function () {
						return f._showPopoverAndOverlay(f._current);
					};
				})(this)
			);
			if (this._current !== null) {
				this.showStep(this._current);
			}
			this._inited = true;
			return this;
		};
		d.prototype.start = function (e) {
			var f;
			if (e == null) {
				e = false;
			}
			if (!this._inited) {
				this.init(e);
			}
			if (this._current === null) {
				f = this._makePromise(
					this._options.onStart != null ? this._options.onStart(this) : void 0
				);
				this._callOnPromiseDone(f, this.showStep, 0);
			}
			return this;
		};
		d.prototype.next = function () {
			var e;
			e = this.hideStep(this._current, this._current + 1);
			return this._callOnPromiseDone(e, this._showNextStep);
		};
		d.prototype.prev = function () {
			var e;
			e = this.hideStep(this._current, this._current - 1);
			return this._callOnPromiseDone(e, this._showPrevStep);
		};
		d.prototype.goTo = function (e) {
			var f;
			f = this.hideStep(this._current, e);
			return this._callOnPromiseDone(f, this.showStep, e);
		};
		d.prototype.end = function () {
			var e, f;
			e = (function (g) {
				return function (h) {
					c(a).off("click.tour-" + g._options.name);
					c(a).off("keyup.tour-" + g._options.name);
					c(window).off("resize.tour-" + g._options.name);
					c(window).off("scroll.tour-" + g._options.name);
					g._setState("end", "yes");
					g._inited = false;
					g._force = false;
					g._clearTimer();
					if (g._options.onEnd != null) {
						return g._options.onEnd(g);
					}
				};
			})(this);
			f = this.hideStep(this._current);
			return this._callOnPromiseDone(f, e);
		};
		d.prototype.ended = function () {
			return !this._force && !!this._getState("end");
		};
		d.prototype.restart = function () {
			this._removeState("current_step");
			this._removeState("end");
			this._removeState("redirect_to");
			return this.start();
		};
		d.prototype.pause = function () {
			var e;
			e = this.getStep(this._current);
			if (!(e && e.duration)) {
				return this;
			}
			this._paused = true;
			this._duration -= new Date().getTime() - this._start;
			window.clearTimeout(this._timer);
			this._debug(
				"Paused/Stopped step " +
					(this._current + 1) +
					" timer (" +
					this._duration +
					" remaining)."
			);
			if (e.onPause != null) {
				return e.onPause(this, this._duration);
			}
		};
		d.prototype.resume = function () {
			var e;
			e = this.getStep(this._current);
			if (!(e && e.duration)) {
				return this;
			}
			this._paused = false;
			this._start = new Date().getTime();
			this._duration = this._duration || e.duration;
			this._timer = window.setTimeout(
				(function (f) {
					return function () {
						if (f._isLast()) {
							return f.next();
						} else {
							return f.end();
						}
					};
				})(this),
				this._duration
			);
			this._debug(
				"Started step " +
					(this._current + 1) +
					" timer with duration " +
					this._duration
			);
			if (e.onResume != null && this._duration !== e.duration) {
				return e.onResume(this, this._duration);
			}
		};
		d.prototype.hideStep = function (f, h) {
			var g, e, k, j;
			j = this.getStep(f);
			if (!j) {
				return;
			}
			this._clearTimer();
			k = this._makePromise(j.onHide != null ? j.onHide(this, f) : void 0);
			e = (function (i) {
				return function (n) {
					var l, m;
					l = c(j.element);
					if (!(l.data("bs.popover") || l.data("popover"))) {
						l = c("body");
					}
					l.popover("destroy")
						.removeClass(
							"tour-" +
								i._options.name +
								"-element tour-" +
								i._options.name +
								"-" +
								f +
								"-element"
						)
						.removeData("bs.popover");
					if (j.reflex) {
						c(j.reflexElement)
							.removeClass("tour-step-element-reflex")
							.off(i._reflexEvent(j.reflex) + ".tour-" + i._options.name);
					}
					if (j.backdrop) {
						m = h != null && i.getStep(h);
						if (!m || !m.backdrop || m.backdropElement !== j.backdropElement) {
							i._hideOverlayElement(j);
						}
					}
					if (j.onHidden != null) {
						return j.onHidden(i);
					}
				};
			})(this);
			g = j.delay.hide || j.delay;
			if ({}.toString.call(g) === "[object Number]" && g > 0) {
				this._debug(
					"Wait " + g + " milliseconds to hide the step " + (this._current + 1)
				);
				window.setTimeout(
					(function (i) {
						return function () {
							return i._callOnPromiseDone(k, e);
						};
					})(this),
					g
				);
			} else {
				this._callOnPromiseDone(k, e);
			}
			return k;
		};
		d.prototype.showStep = function (f) {
			var j, l, e, k, h, g;
			if (this.ended()) {
				this._debug("Tour ended, showStep prevented.");
				return this;
			}
			g = this.getStep(f);
			if (!g) {
				return;
			}
			h = f < this._current;
			l = this._makePromise(g.onShow != null ? g.onShow(this, f) : void 0);
			this.setCurrentStep(f);
			j = function () {
				switch ({}.toString.call(g.path)) {
					case "[object Function]":
						return g.path();
					case "[object String]":
						return this._options.basePath + g.path;
					default:
						return g.path;
				}
			}.call(this);
			if (g.redirect && this._isRedirect(g.host, j, a.location)) {
				this._redirect(g, f, j);
				if (!this._isJustPathHashDifferent(g.host, j, a.location)) {
					return;
				}
			}
			k = (function (i) {
				return function (m) {
					if (i._isOrphan(g)) {
						if (g.orphan === false) {
							i._debug(
								"Skip the orphan step " +
									(i._current + 1) +
									".\nOrphan option is false and the element does not exist or is hidden."
							);
							if (h) {
								i._showPrevStep();
							} else {
								i._showNextStep();
							}
							return;
						}
						i._debug(
							"Show the orphan step " +
								(i._current + 1) +
								". Orphans option is true."
						);
					}
					if (g.autoscroll) {
						i._scrollIntoView(f);
					} else {
						i._showPopoverAndOverlay(f);
					}
					if (g.duration) {
						return i.resume();
					}
				};
			})(this);
			e = g.delay.show || g.delay;
			if ({}.toString.call(e) === "[object Number]" && e > 0) {
				this._debug(
					"Wait " + e + " milliseconds to show the step " + (this._current + 1)
				);
				window.setTimeout(
					(function (i) {
						return function () {
							return i._callOnPromiseDone(l, k);
						};
					})(this),
					e
				);
			} else {
				this._callOnPromiseDone(l, k);
			}
			return l;
		};
		d.prototype.getCurrentStep = function () {
			return this._current;
		};
		d.prototype.setCurrentStep = function (e) {
			if (e != null) {
				this._current = e;
				this._setState("current_step", e);
			} else {
				this._current = this._getState("current_step");
				this._current =
					this._current === null ? null : parseInt(this._current, 10);
			}
			return this;
		};
		d.prototype.redraw = function () {
			return this._showOverlayElement(this.getStep(this.getCurrentStep()));
		};
		d.prototype._setState = function (g, i) {
			var j, h;
			if (this._options.storage) {
				h = this._options.name + "_" + g;
				try {
					this._options.storage.setItem(h, i);
				} catch (f) {
					j = f;
					if (j.code === DOMException.QUOTA_EXCEEDED_ERR) {
						this._debug("LocalStorage quota exceeded. State storage failed.");
					}
				}
				return this._options.afterSetState(h, i);
			} else {
				if (this._state == null) {
					this._state = {};
				}
				return (this._state[g] = i);
			}
		};
		d.prototype._removeState = function (e) {
			var f;
			if (this._options.storage) {
				f = this._options.name + "_" + e;
				this._options.storage.removeItem(f);
				return this._options.afterRemoveState(f);
			} else {
				if (this._state != null) {
					return delete this._state[e];
				}
			}
		};
		d.prototype._getState = function (e) {
			var f, g;
			if (this._options.storage) {
				f = this._options.name + "_" + e;
				g = this._options.storage.getItem(f);
			} else {
				if (this._state != null) {
					g = this._state[e];
				}
			}
			if (g === void 0 || g === "null") {
				g = null;
			}
			this._options.afterGetState(e, g);
			return g;
		};
		d.prototype._showNextStep = function () {
			var g, e, f;
			f = this.getStep(this._current);
			e = (function (h) {
				return function (i) {
					return h.showStep(f.next);
				};
			})(this);
			g = this._makePromise(f.onNext != null ? f.onNext(this) : void 0);
			return this._callOnPromiseDone(g, e);
		};
		d.prototype._showPrevStep = function () {
			var g, e, f;
			f = this.getStep(this._current);
			e = (function (h) {
				return function (i) {
					return h.showStep(f.prev);
				};
			})(this);
			g = this._makePromise(f.onPrev != null ? f.onPrev(this) : void 0);
			return this._callOnPromiseDone(g, e);
		};
		d.prototype._debug = function (e) {
			if (this._options.debug) {
				return window.console.log(
					"Bootstrap Tour '" + this._options.name + "' | " + e
				);
			}
		};
		d.prototype._isRedirect = function (g, h, e) {
			var f;
			if (
				g != null &&
				g !== "" &&
				(({}.toString.call(g) === "[object RegExp]" && !g.test(e.origin)) ||
					({}.toString.call(g) === "[object String]" &&
						this._isHostDifferent(g, e)))
			) {
				return true;
			}
			f = [e.pathname, e.search, e.hash].join("");
			return (
				h != null &&
				h !== "" &&
				(({}.toString.call(h) === "[object RegExp]" && !h.test(f)) ||
					({}.toString.call(h) === "[object String]" &&
						this._isPathDifferent(h, f)))
			);
		};
		d.prototype._isHostDifferent = function (f, e) {
			switch ({}.toString.call(f)) {
				case "[object RegExp]":
					return !f.test(e.origin);
				case "[object String]":
					return (
						this._getProtocol(f) !== this._getProtocol(e.href) ||
						this._getHost(f) !== this._getHost(e.href)
					);
				default:
					return true;
			}
		};
		d.prototype._isPathDifferent = function (f, e) {
			return (
				this._getPath(f) !== this._getPath(e) ||
				!this._equal(this._getQuery(f), this._getQuery(e)) ||
				!this._equal(this._getHash(f), this._getHash(e))
			);
		};
		d.prototype._isJustPathHashDifferent = function (g, h, e) {
			var f;
			if (g != null && g !== "") {
				if (this._isHostDifferent(g, e)) {
					return false;
				}
			}
			f = [e.pathname, e.search, e.hash].join("");
			if ({}.toString.call(h) === "[object String]") {
				return (
					this._getPath(h) === this._getPath(f) &&
					this._equal(this._getQuery(h), this._getQuery(f)) &&
					!this._equal(this._getHash(h), this._getHash(f))
				);
			}
			return false;
		};
		d.prototype._redirect = function (g, f, h) {
			var e;
			if (c.isFunction(g.redirect)) {
				return g.redirect.call(this, h);
			} else {
				e =
					{}.toString.call(g.host) === "[object String]" ? "" + g.host + h : h;
				this._debug("Redirect to " + e);
				if (this._getState("redirect_to") === "" + f) {
					this._debug("Error redirection loop to " + h);
					this._removeState("redirect_to");
					if (g.onRedirectError != null) {
						return g.onRedirectError(this);
					}
				} else {
					this._setState("redirect_to", "" + f);
					return (a.location.href = e);
				}
			}
		};
		d.prototype._isOrphan = function (e) {
			return (
				e.element == null ||
				!c(e.element).length ||
				(c(e.element).is(":hidden") &&
					c(e.element)[0].namespaceURI !== "http://www.w3.org/2000/svg")
			);
		};
		d.prototype._isLast = function () {
			return this._current < this._options.steps.length - 1;
		};
		d.prototype._showPopoverAndOverlay = function (e) {
			var f;
			if (this.getCurrentStep() !== e || this.ended()) {
				return;
			}
			f = this.getStep(e);
			if (f.backdrop) {
				this._showOverlayElement(f);
			}
			this._showPopover(f, e);
			if (f.onShown != null) {
				f.onShown(this);
			}
			return this._debug(
				"Step " + (this._current + 1) + " of " + this._options.steps.length
			);
		};
		d.prototype._showPopover = function (k, j) {
			var e, l, f, h, g;
			c(".tour-" + this._options.name).remove();
			h = c.extend({}, this._options);
			f = this._isOrphan(k);
			k.template = this._template(k, j);
			if (f) {
				k.element = "body";
				k.placement = "top";
			}
			e = c(k.element);
			e.addClass(
				"tour-" +
					this._options.name +
					"-element tour-" +
					this._options.name +
					"-" +
					j +
					"-element"
			);
			if (k.options) {
				c.extend(h, k.options);
			}
			if (k.reflex && !f) {
				c(k.reflexElement)
					.addClass("tour-step-element-reflex")
					.off(this._reflexEvent(k.reflex) + ".tour-" + this._options.name)
					.on(
						this._reflexEvent(k.reflex) + ".tour-" + this._options.name,
						(function (i) {
							return function () {
								if (i._isLast()) {
									return i.next();
								} else {
									return i.end();
								}
							};
						})(this)
					);
			}
			g = k.smartPlacement === true && k.placement.search(/auto/i) === -1;
			e.popover({
				placement: g ? "auto " + k.placement : k.placement,
				trigger: "manual",
				title: k.title,
				content: k.content,
				html: true,
				animation: k.animation,
				container: k.container,
				template: k.template,
				selector: k.element,
			}).popover("show");
			l = e.data("bs.popover")
				? e.data("bs.popover").tip()
				: e.data("popover").tip();
			l.attr("id", k.id);
			if (e.css("position") === "fixed") {
				l.css("position", "fixed");
			}
			this._reposition(l, k);
			if (f) {
				return this._center(l);
			}
		};
		d.prototype._template = function (k, h) {
			var m, e, f, l, g, j;
			j = k.template;
			if (
				this._isOrphan(k) &&
				{}.toString.call(k.orphan) !== "[object Boolean]"
			) {
				j = k.orphan;
			}
			g = c.isFunction(j) ? c(j(h, k)) : c(j);
			m = g.find(".popover-navigation");
			f = m.find('[data-role="prev"]');
			e = m.find('[data-role="next"]');
			l = m.find('[data-role="pause-resume"]');
			if (this._isOrphan(k)) {
				g.addClass("orphan");
			}
			g.addClass(
				"tour-" + this._options.name + " tour-" + this._options.name + "-" + h
			);
			if (k.reflex) {
				g.addClass("tour-" + this._options.name + "-reflex");
			}
			if (k.prev < 0) {
				f.addClass("disabled").prop("disabled", true).prop("tabindex", -1);
			}
			if (k.next < 0) {
				e.addClass("disabled").prop("disabled", true).prop("tabindex", -1);
			}
			if (!k.duration) {
				l.remove();
			}
			return g.clone().wrap("<div>").parent().html();
		};
		d.prototype._reflexEvent = function (e) {
			if ({}.toString.call(e) === "[object Boolean]") {
				return "click";
			} else {
				return e;
			}
		};
		d.prototype._reposition = function (i, f) {
			var g, e, h, l, m, k, j;
			l = i[0].offsetWidth;
			e = i[0].offsetHeight;
			j = i.offset();
			m = j.left;
			k = j.top;
			g = c(a).outerHeight() - j.top - i.outerHeight();
			if (g < 0) {
				j.top = j.top + g;
			}
			h = c("html").outerWidth() - j.left - i.outerWidth();
			if (h < 0) {
				j.left = j.left + h;
			}
			if (j.top < 0) {
				j.top = 0;
			}
			if (j.left < 0) {
				j.left = 0;
			}
			i.offset(j);
			if (f.placement === "bottom" || f.placement === "top") {
				if (m !== j.left) {
					return this._replaceArrow(i, (j.left - m) * 2, l, "left");
				}
			} else {
				if (k !== j.top) {
					return this._replaceArrow(i, (j.top - k) * 2, e, "top");
				}
			}
		};
		d.prototype._center = function (e) {
			return e.css("top", c(window).outerHeight() / 2 - e.outerHeight() / 2);
		};
		d.prototype._replaceArrow = function (g, h, f, e) {
			return g.find(".arrow").css(e, h ? 50 * (1 - h / f) + "%" : "");
		};
		d.prototype._scrollIntoView = function (l) {
			var m, g, f, n, j, h, k, e;
			k = this.getStep(l);
			m = c(k.element);
			if (!m.length) {
				return this._showPopoverAndOverlay(l);
			}
			g = c(window);
			j = m.offset().top;
			n = m.outerHeight();
			e = g.height();
			h = 0;
			switch (k.placement) {
				case "top":
					h = Math.max(0, j - e / 2);
					break;
				case "left":
				case "right":
					h = Math.max(0, j + n / 2 - e / 2);
					break;
				case "bottom":
					h = Math.max(0, j + n - e / 2);
			}
			this._debug(
				"Scroll into view. ScrollTop: " +
					h +
					". Element offset: " +
					j +
					". Window height: " +
					e +
					"."
			);
			f = 0;
			return c("body, html")
				.stop(true, true)
				.animate(
					{ scrollTop: Math.ceil(h) },
					(function (i) {
						return function () {
							if (++f === 2) {
								i._showPopoverAndOverlay(l);
								return i._debug(
									"Scroll into view.\nAnimation end element offset: " +
										m.offset().top +
										".\nWindow height: " +
										g.height() +
										"."
								);
							}
						};
					})(this)
				);
		};
		d.prototype._onResize = function (f, e) {
			return c(window).on("resize.tour-" + this._options.name, function () {
				clearTimeout(e);
				return (e = setTimeout(f, 100));
			});
		};
		d.prototype._onScroll = function (f, e) {
			return c(window).on("scroll.tour-" + this._options.name, function () {
				clearTimeout(e);
				return (e = setTimeout(f, 100));
			});
		};
		d.prototype._initMouseNavigation = function () {
			var e;
			e = this;
			return c(a)
				.off(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='prev']"
				)
				.off(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='next']"
				)
				.off(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='end']"
				)
				.off(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='pause-resume']"
				)
				.on(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='next']",
					(function (f) {
						return function (g) {
							g.preventDefault();
							return f.next();
						};
					})(this)
				)
				.on(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='prev']",
					(function (f) {
						return function (g) {
							g.preventDefault();
							if (f._current > 0) {
								return f.prev();
							}
						};
					})(this)
				)
				.on(
					"click.tour-" + this._options.name,
					".popover.tour-" + this._options.name + " *[data-role='end']",
					(function (f) {
						return function (g) {
							g.preventDefault();
							return f.end();
						};
					})(this)
				)
				.on(
					"click.tour-" + this._options.name,
					".popover.tour-" +
						this._options.name +
						" *[data-role='pause-resume']",
					function (g) {
						var f;
						g.preventDefault();
						f = c(this);
						f.text(e._paused ? f.data("pause-text") : f.data("resume-text"));
						if (e._paused) {
							return e.resume();
						} else {
							return e.pause();
						}
					}
				);
		};
		d.prototype._initKeyboardNavigation = function () {
			if (!this._options.keyboard) {
				return;
			}
			return c(a).on(
				"keyup.tour-" + this._options.name,
				(function (e) {
					return function (f) {
						if (!f.which) {
							return;
						}
						switch (f.which) {
							case 39:
								f.preventDefault();
								if (e._isLast()) {
									return e.next();
								} else {
									return e.end();
								}
								break;
							case 37:
								f.preventDefault();
								if (e._current > 0) {
									return e.prev();
								}
						}
					};
				})(this)
			);
		};
		d.prototype._makePromise = function (e) {
			if (e && c.isFunction(e.then)) {
				return e;
			} else {
				return null;
			}
		};
		d.prototype._callOnPromiseDone = function (g, f, e) {
			if (g) {
				return g.then(
					(function (h) {
						return function (i) {
							return f.call(h, e);
						};
					})(this)
				);
			} else {
				return f.call(this, e);
			}
		};
		d.prototype._showBackground = function (h, l) {
			var o, f, p, i, m, n, g, k, e;
			p = c(a).height();
			e = c(a).width();
			g = ["top", "bottom", "left", "right"];
			k = [];
			for (i = 0, m = g.length; i < m; i++) {
				n = g[i];
				o =
					(f = this.backdrops)[n] != null
						? f[n]
						: (f[n] = c("<div>", { class: "tour-backdrop " + n }));
				c(h.backdropContainer).append(o);
				switch (n) {
					case "top":
						k.push(
							o
								.height(l.offset.top > 0 ? l.offset.top : 0)
								.width(e)
								.offset({ top: 0, left: 0 })
						);
						break;
					case "bottom":
						k.push(
							o
								.offset({ top: l.offset.top + l.height, left: 0 })
								.height(p - (l.offset.top + l.height))
								.width(e)
						);
						break;
					case "left":
						k.push(
							o
								.offset({ top: l.offset.top, left: 0 })
								.height(l.height)
								.width(l.offset.left > 0 ? l.offset.left : 0)
						);
						break;
					case "right":
						k.push(
							o
								.offset({ top: l.offset.top, left: l.offset.left + l.width })
								.height(l.height)
								.width(e - (l.offset.left + l.width))
						);
						break;
					default:
						k.push(void 0);
				}
			}
			return k;
		};
		d.prototype._showOverlayElement = function (f) {
			var g, e;
			g = c(f.backdropElement);
			if (g.length === 0) {
				e = { width: 0, height: 0, offset: { top: 0, left: 0 } };
			} else {
				e = {
					width: g.innerWidth(),
					height: g.innerHeight(),
					offset: g.offset(),
				};
				g.addClass("tour-step-backdrop");
				if (f.backdropPadding) {
					e = this._applyBackdropPadding(f.backdropPadding, e);
				}
			}
			return this._showBackground(f, e);
		};
		d.prototype._hideOverlayElement = function (g) {
			var e, h, f;
			c(g.backdropElement).removeClass("tour-step-backdrop");
			f = this.backdrops;
			for (h in f) {
				e = f[h];
				if (e && e.remove !== void 0) {
					e.remove();
				}
			}
			return (this.backdrops = []);
		};
		d.prototype._applyBackdropPadding = function (f, e) {
			if (typeof f === "object") {
				if (f.top == null) {
					f.top = 0;
				}
				if (f.right == null) {
					f.right = 0;
				}
				if (f.bottom == null) {
					f.bottom = 0;
				}
				if (f.left == null) {
					f.left = 0;
				}
				e.offset.top = e.offset.top - f.top;
				e.offset.left = e.offset.left - f.left;
				e.width = e.width + f.left + f.right;
				e.height = e.height + f.top + f.bottom;
			} else {
				e.offset.top = e.offset.top - f;
				e.offset.left = e.offset.left - f;
				e.width = e.width + f * 2;
				e.height = e.height + f * 2;
			}
			return e;
		};
		d.prototype._clearTimer = function () {
			window.clearTimeout(this._timer);
			this._timer = null;
			return (this._duration = null);
		};
		d.prototype._getProtocol = function (e) {
			e = e.split("://");
			if (e.length > 1) {
				return e[0];
			} else {
				return "http";
			}
		};
		d.prototype._getHost = function (e) {
			e = e.split("//");
			e = e.length > 1 ? e[1] : e[0];
			return e.split("/")[0];
		};
		d.prototype._getPath = function (e) {
			return e.replace(/\/?$/, "").split("?")[0].split("#")[0];
		};
		d.prototype._getQuery = function (e) {
			return this._getParams(e, "?");
		};
		d.prototype._getHash = function (e) {
			return this._getParams(e, "#");
		};
		d.prototype._getParams = function (h, l) {
			var f, e, k, i, g;
			i = h.split(l);
			if (i.length === 1) {
				return {};
			}
			i = i[1].split("&");
			g = {};
			for (f = 0, e = i.length; f < e; f++) {
				k = i[f];
				k = k.split("=");
				g[k[0]] = k[1] || "";
			}
			return g;
		};
		d.prototype._equal = function (n, m) {
			var i, h, f, e, l, g;
			if (
				{}.toString.call(n) === "[object Object]" &&
				{}.toString.call(m) === "[object Object]"
			) {
				e = Object.keys(n);
				l = Object.keys(m);
				if (e.length !== l.length) {
					return false;
				}
				for (h in n) {
					g = n[h];
					if (!this._equal(m[h], g)) {
						return false;
					}
				}
				return true;
			} else {
				if (
					{}.toString.call(n) === "[object Array]" &&
					{}.toString.call(m) === "[object Array]"
				) {
					if (n.length !== m.length) {
						return false;
					}
					for (h = i = 0, f = n.length; i < f; h = ++i) {
						g = n[h];
						if (!this._equal(g, m[h])) {
							return false;
						}
					}
					return true;
				} else {
					return n === m;
				}
			}
		};
		return d;
	})();
	return b;
});
